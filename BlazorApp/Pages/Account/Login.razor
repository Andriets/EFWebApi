@page  "/Login"
@using BlazorApp.Models;
@using BlazorApp.Services;
@using BlazorApp.Data;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject NavigationManager NavigationManager;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject AccountService _accountService;
<h3>Login</h3>

<EditForm Model="@LoginViewModel" OnValidSubmit="Loginin">
    <FluentValidator></FluentValidator>
    <DataAnnotationsValidator />
    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
        <p>
            <MatTextField Label="Email" @bind-Value="LoginViewModel.Email" />
            <ValidationMessage For="@(() => LoginViewModel.Email)" />
        </p>
        <p>
            <MatTextField Label="Password" @bind-Value="LoginViewModel.Password" Type="password" />
            <ValidationMessage For="@(() => LoginViewModel.Password)" />
        </p>

    </div>

    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
        <MatButton Type="submit" Raised="true">Login</MatButton>
    </div>
    <div class="col-12 row" style="text-align:left; font-weight:bold">
        <span class="col-12">@LoginMesssage</span>
    </div>
</EditForm>


@code {
    public LoginViewModel LoginViewModel { get; set; }
    public string LoginMesssage { get; set; }
    protected override void OnInitialized()
    {
        LoginViewModel = new LoginViewModel();
    }
    public async Task<bool> Loginin()
    {

        var res = await _accountService.Login(LoginViewModel);
        if (res.Success)
        {
            ((StateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(LoginViewModel.Email);
            NavigationManager.NavigateTo("/");
            await sessionStorage.SetItemAsync("emailAddress", LoginViewModel.Email);
        }
        else
        {
            LoginMesssage = res.Message;
        }
        LoginViewModel = new LoginViewModel();

        return await Task.FromResult(true);
    }
}
