@page "/Register"
@using BlazorApp.Services;
@using BlazorApp.Models;
@inject AccountService _accountService
@inject NavigationManager NavigationManager;
<h2>Регистрация нового пользователя</h2>

<EditForm Model="@RegisterViewModel" OnValidSubmit="Create">
    <FluentValidator></FluentValidator>
    <DataAnnotationsValidator />
    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
        <p>
            <MatTextField Label="Username" @bind-Value="RegisterViewModel.Name" />
            <ValidationMessage For="@(() => RegisterViewModel.Name)" />
        </p>
        <p>
            <MatTextField Label="Email" @bind-Value="RegisterViewModel.Email" />
            <ValidationMessage For="@(() => RegisterViewModel.Email)" />
        </p>
        <p>
            <MatTextField Label="Password" @bind-Value="RegisterViewModel.Password" Type="password" />
            <ValidationMessage For="@(() => RegisterViewModel.Password)" />
        </p>
        <p>
            <MatTextField Label="PasswordConfirm" @bind-Value="RegisterViewModel.PasswordConfirm" Type="password" />
            <ValidationMessage For="@(() => RegisterViewModel.PasswordConfirm)" />
        </p>

    </div>

    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
        <MatButton Type="submit" Raised="true">Register</MatButton>
    </div>
    <p>@Succes</p>
</EditForm>

@code {
    public RegisterViewModel RegisterViewModel { get; set; }
    public string Succes;
    protected override void OnInitialized()
    {
        RegisterViewModel = new RegisterViewModel();
    }
    protected async Task Create()
    {
        var res = await _accountService.Register(RegisterViewModel);
        if (res.Success)
        {
            NavigationManager.NavigateTo("/Login");
        }
        else
        {
            RegisterViewModel = new RegisterViewModel();
            Succes = res.Message;
        }
    }
}
