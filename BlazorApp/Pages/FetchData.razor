@page "/fetchdata"

@using BlazorApp.Data
@using Microsoft.AspNetCore.Mvc;
@using DAL.Owner_Parameters;
@using ClassLibrary1.Interfaces.IServices;
@using ClassLibrary1.Entities;
@using BlazorApp.Services;
@using BlazorApp.Models;
@using BLL.DTO;
@inject ProductService productService

<h1>Products</h1>

<p>The best products in the world</p>

<MatRadioGroup @bind-Value="@Val3" Items="@Val3Items">
    <ItemTemplate>
        <div>
            <MatRadioButton Value="@context">@context</MatRadioButton>
        </div>
    </ItemTemplate>
</MatRadioGroup>
<div class="col-2">
    <p>Price to: @PriceTo</p>
    <MatSlider @bind-Value="@PriceTo" ValueMin="0" ValueMax="30000" Discrete="true"></MatSlider>
</div>
<button @onclick="Search">Search</button>
@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Product name</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.productName</td>
                    <td>@product.price</td>
                </tr>
            }
        </tbody>
    </table>
    <button @onclick="PrevPage">Prev</button>
    <span>@pageNum</span>
    <button @onclick="NextPage">Next</button>
}

@code {

    protected string Val3;

    protected string[] Val3Items =
    {
          "Window",
          "Door",
          "Both"
    };

    public decimal PriceTo
    {
        get => priceTo;
        set
        {
            priceTo = value;
            this.StateHasChanged();
        }
    }

    private decimal priceTo = 0;

    List<ProductView> products;
    List<ProductView> Searchproducts;
    private int pageNum = 1;
    private int pageSize = 2;
    protected override async Task OnInitializedAsync()
    {
        PagingParameters p = new PagingParameters
        {
            PageNumber = pageNum,
            PageSize = pageSize
        };
        products = await productService.GetAll(p);
    }
    public async Task NextPage()
    {
        pageNum++;
        if (Searchproducts != null)
        {
            await this.Search();
        }
        else
        {
            products = await productService.GetAll(new PagingParameters { PageNumber = pageNum, PageSize = pageSize });
        }
    }
    public async Task PrevPage()
    {
        if (pageNum > 1)
        {
            pageNum--;
            if (Searchproducts != null)
            {
                await this.Search();
            }
            else
            {
                products = await productService.GetAll(new PagingParameters { PageNumber = pageNum, PageSize = pageSize });
            }
        }
    }
    public async Task Search()
    {
        Searchproducts = await productService.GetByFilter(new PagingParameters { PageNumber = pageNum, PageSize = pageSize, Price = decimal.ToDouble(PriceTo), Type = Val3 });
        products = Searchproducts;
    }
}
